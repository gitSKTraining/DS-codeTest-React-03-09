{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gopin\\\\ReactJS_Projects\\\\datasite-code-test\\\\src\\\\components\\\\UsersListingComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setAllUsers } from \"../redux/actions/Actions\";\nimport useFetch from \"./common/useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UsersListingComponent = () => {\n  _s();\n\n  // console.log(\"into users Listing\");\n  const [refresh, setRefresh] = useState(false);\n  const [registered, setRegistered] = useState([]);\n  const [unregistered, setUnRegistered] = useState([]);\n  const [users, setUsers] = useState([]);\n  const dispatch = useDispatch();\n\n  const refreshPage = () => {\n    console.log(\"refresh calle....\");\n    setUsers([]);\n    setRefresh(true);\n    console.log(\"refresh\");\n  };\n\n  const getDataFromAPI = async (url, type) => {\n    console.log(\"url called... \", url);\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (type == \"registered\") {\n      console.log(\"into reg...\");\n      setRegistered(data);\n    } else {\n      console.log(\"into unreg...\");\n      setUnRegistered(data);\n    }\n  };\n\n  useEffect(() => {\n    //fetching unregistered data....\n    console.log(\"Use Effect called..\"); // if (registered.length == 0 && unregistered.length == 0) {\n    //setUsers([]);\n    // }\n\n    getDataFromAPI(\"https://5c3ce12c29429300143fe570.mockapi.io/api/unregisteredusers\", \"unregistered\").then(() => {\n      unregistered.map(each => {\n        //  console.log(\"UNREG=> \", each);\n        setUsers(users => [...users, {\n          id: each.id,\n          status: \"UNREG\",\n          projectID: \"\"\n        }]); // users.push({ id: each.id, status: \"UNREG\" });\n\n        console.log(\"user aftert : \", users);\n      });\n    }); //fetching registered data....\n\n    getDataFromAPI(\"https://5c3ce12c29429300143fe570.mockapi.io/api/registeredusers\", \"registered\").then(() => {\n      registered.map(each => {\n        setUsers(users => [...users, {\n          id: each.id,\n          status: \"REG\",\n          projectID: \"\"\n        }]); //        users.push({ id: each.id, status: \"REG\" });\n      });\n      console.log(\"user aftert : \", users);\n    });\n  }, []); // console.log(\"USER DATA AFTER FINAL UPDATE : \", users);\n  //dispatching the users to the store\n\n  dispatch(setAllUsers(users));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshPage,\n      children: \" refreshPage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UsersListingComponent, \"G7LF7Xyq3qh4I+hY6fSC29OFJqg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = UsersListingComponent;\nexport default UsersListingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersListingComponent\");","map":{"version":3,"sources":["C:/Users/gopin/ReactJS_Projects/datasite-code-test/src/components/UsersListingComponent.js"],"names":["React","useEffect","useState","useDispatch","setAllUsers","useFetch","UsersListingComponent","refresh","setRefresh","registered","setRegistered","unregistered","setUnRegistered","users","setUsers","dispatch","refreshPage","console","log","getDataFromAPI","url","type","response","fetch","data","json","then","map","each","id","status","projectID"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAllUsers } from \"../redux/actions/Actions\";\r\nimport useFetch from \"./common/useFetch\";\r\n\r\nconst UsersListingComponent = () => {\r\n  // console.log(\"into users Listing\");\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [registered, setRegistered] = useState([]);\r\n  const [unregistered, setUnRegistered] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const refreshPage = () => {\r\n    console.log(\"refresh calle....\");\r\n    setUsers([]);\r\n    setRefresh(true);\r\n    console.log(\"refresh\");\r\n  };\r\n\r\n  const getDataFromAPI = async (url, type) => {\r\n    console.log(\"url called... \", url);\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (type == \"registered\") {\r\n      console.log(\"into reg...\");\r\n      setRegistered(data);\r\n    } else {\r\n      console.log(\"into unreg...\");\r\n      setUnRegistered(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    //fetching unregistered data....\r\n    console.log(\"Use Effect called..\");\r\n    // if (registered.length == 0 && unregistered.length == 0) {\r\n    //setUsers([]);\r\n    // }\r\n    getDataFromAPI(\r\n      \"https://5c3ce12c29429300143fe570.mockapi.io/api/unregisteredusers\",\r\n      \"unregistered\"\r\n    ).then(() => {\r\n      unregistered.map((each) => {\r\n        //  console.log(\"UNREG=> \", each);\r\n        setUsers((users) => [\r\n          ...users,\r\n          { id: each.id, status: \"UNREG\", projectID: \"\" },\r\n        ]);\r\n        // users.push({ id: each.id, status: \"UNREG\" });\r\n\r\n        console.log(\"user aftert : \", users);\r\n      });\r\n    });\r\n\r\n    //fetching registered data....\r\n    getDataFromAPI(\r\n      \"https://5c3ce12c29429300143fe570.mockapi.io/api/registeredusers\",\r\n      \"registered\"\r\n    ).then(() => {\r\n      registered.map((each) => {\r\n        setUsers((users) => [\r\n          ...users,\r\n          { id: each.id, status: \"REG\", projectID: \"\" },\r\n        ]);\r\n        //        users.push({ id: each.id, status: \"REG\" });\r\n      });\r\n      console.log(\"user aftert : \", users);\r\n    });\r\n  }, []);\r\n\r\n  // console.log(\"USER DATA AFTER FINAL UPDATE : \", users);\r\n\r\n  //dispatching the users to the store\r\n  dispatch(setAllUsers(users));\r\n\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <button onClick={refreshPage}> refreshPage</button>\r\n      {/* <table>\r\n        <thead>\r\n          <tr>\r\n            <td>id</td>\r\n            <td>status</td>\r\n            <td> Project ID</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((each) => (\r\n            <tr>\r\n              <td> {each.id} </td> <td> {each.status}</td>{\" \"}\r\n              <td> {each.projectID}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersListingComponent;\r\n"]},"metadata":{},"sourceType":"module"}