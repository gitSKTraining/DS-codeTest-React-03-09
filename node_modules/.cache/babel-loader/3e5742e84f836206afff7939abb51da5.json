{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gopin\\\\ReactJS_Projects\\\\datasite-code-test\\\\src\\\\components\\\\UsersListingComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setAllUsers } from \"../redux/actions/Actions\";\nimport commonData from \"./commonData\"; // import useFetch from \"./common/useFetch\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UsersListingComponent = () => {\n  _s();\n\n  const [displayData, setDisplayData] = useState(false);\n  const [registered, setRegistered] = useState([]);\n  const [unregistered, setUnRegistered] = useState([]);\n  const [projectMembership, setProjectMembership] = useState([]);\n  const [users, setUsers] = useState([]);\n  const dispatch = useDispatch();\n\n  const refreshPage = () => {\n    setUsers([]);\n    setDisplayData(!displayData);\n    console.log(\"display\");\n  };\n\n  const getDataFromAPI = async (url, type) => {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (type == commonData.registered) {\n      setRegistered(data);\n    } else if (type == commonData.unregistered) {\n      setUnRegistered(data);\n    } else {}\n  };\n\n  const updataUsersInfo = (data, type) => {\n    let userStatus = \"\";\n    data.map(each => {\n      if (type == commonData.registered) {\n        userStatus = commonData.registered;\n      } else {\n        userStatus = commonData.unregistered;\n      }\n\n      setUsers(users => [...users, {\n        id: each.id,\n        status: userStatus,\n        projectID: []\n      }]);\n      console.log(\"user after updata : \", users);\n    });\n  };\n\n  useEffect(() => {\n    //fetching unregistered data....\n    console.log(\"Use Effect called..\");\n    getDataFromAPI(commonData.unregistered_url, commonData.unregistered).then(() => {\n      updataUsersInfo(unregistered, commonData.unregistered);\n    }); //fetching registered data....\n\n    getDataFromAPI(commonData.registered_url, commonData.registered).then(() => {\n      updataUsersInfo(registered, commonData.registered); //        users.push({ id: each.id, status: \"REG\" });\n    });\n  }, [displayData]); //dispatching the users to the store\n\n  dispatch(setAllUsers(users));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Click on the display button to get all the users information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshPage,\n      children: \" Display Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UsersListingComponent, \"lX4bwePRB3Ossj5VAEXheY80q04=\", false, function () {\n  return [useDispatch];\n});\n\n_c = UsersListingComponent;\nexport default UsersListingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersListingComponent\");","map":{"version":3,"sources":["C:/Users/gopin/ReactJS_Projects/datasite-code-test/src/components/UsersListingComponent.js"],"names":["React","useEffect","useState","useDispatch","setAllUsers","commonData","UsersListingComponent","displayData","setDisplayData","registered","setRegistered","unregistered","setUnRegistered","projectMembership","setProjectMembership","users","setUsers","dispatch","refreshPage","console","log","getDataFromAPI","url","type","response","fetch","data","json","updataUsersInfo","userStatus","map","each","id","status","projectID","unregistered_url","then","registered_url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAllUsers } from \"../redux/actions/Actions\";\r\n\r\nimport commonData from \"./commonData\";\r\n// import useFetch from \"./common/useFetch\";\r\n\r\nconst UsersListingComponent = () => {\r\n  const [displayData, setDisplayData] = useState(false);\r\n  const [registered, setRegistered] = useState([]);\r\n  const [unregistered, setUnRegistered] = useState([]);\r\n  const [projectMembership, setProjectMembership] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const refreshPage = () => {\r\n    setUsers([]);\r\n    setDisplayData(!displayData);\r\n    console.log(\"display\");\r\n  };\r\n\r\n  const getDataFromAPI = async (url, type) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (type == commonData.registered) {\r\n      setRegistered(data);\r\n    } else if (type == commonData.unregistered) {\r\n      setUnRegistered(data);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const updataUsersInfo = (data, type) => {\r\n    let userStatus = \"\";\r\n    data.map((each) => {\r\n      if (type == commonData.registered) {\r\n        userStatus = commonData.registered;\r\n      } else {\r\n        userStatus = commonData.unregistered;\r\n      }\r\n      setUsers((users) => [\r\n        ...users,\r\n        { id: each.id, status: userStatus, projectID: [] },\r\n      ]);\r\n\r\n      console.log(\"user after updata : \", users);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    //fetching unregistered data....\r\n    console.log(\"Use Effect called..\");\r\n    getDataFromAPI(commonData.unregistered_url, commonData.unregistered).then(\r\n      () => {\r\n        updataUsersInfo(unregistered, commonData.unregistered);\r\n      }\r\n    );\r\n\r\n    //fetching registered data....\r\n    getDataFromAPI(commonData.registered_url, commonData.registered).then(\r\n      () => {\r\n        updataUsersInfo(registered, commonData.registered);\r\n        //        users.push({ id: each.id, status: \"REG\" });\r\n      }\r\n    );\r\n  }, [displayData]);\r\n\r\n  //dispatching the users to the store\r\n  dispatch(setAllUsers(users));\r\n\r\n  return (\r\n    <div>\r\n      <h2> Click on the display button to get all the users information.</h2>\r\n      <button onClick={refreshPage}> Display Users</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersListingComponent;\r\n"]},"metadata":{},"sourceType":"module"}