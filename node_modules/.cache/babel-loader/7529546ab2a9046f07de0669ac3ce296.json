{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gopin\\\\ReactJS_Projects\\\\datasite-code-test\\\\src\\\\components\\\\UsersListingComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setAllUsers } from \"../redux/actions/Actions\";\nimport commonData from \"./commonData\"; // import useFetch from \"./common/useFetch\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UsersListingComponent = () => {\n  _s();\n\n  const [displayData, setDisplayData] = useState(false);\n  const [registered, setRegistered] = useState([]);\n  const [unregistered, setUnRegistered] = useState([]);\n  const [projectMembership, setProjectMembership] = useState([]);\n  const [users, setUsers] = useState([]);\n  const projectID = [];\n  const dispatch = useDispatch();\n\n  const refreshPage = () => {\n    setUsers([]);\n    setDisplayData(!displayData);\n    console.log(\"display\");\n  };\n\n  const getDataFromAPI = async (url, type) => {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    if (type == commonData.registered) {\n      setRegistered(data);\n    } else if (type == commonData.unregistered) {\n      setUnRegistered(data);\n    } else if (type == \"\") {\n      console.log(\"data in PM :\", data);\n      setProjectMembership(data);\n    }\n  };\n\n  const updataUsersInfo = (data, type) => {\n    let userStatus = \"\";\n    data.map(each => {\n      var projects = [];\n\n      if (type == commonData.registered) {\n        userStatus = commonData.registered;\n      } else {\n        userStatus = commonData.unregistered;\n      }\n\n      var projectDetailsfromEndPoint = projectMembership.filter(item => item.userId == each.id); //      console.log(\"projIdsfromEndPoint : \", projectDetailsfromEndPoint);\n\n      projectDetailsfromEndPoint.map(each => {\n        console.log(\"each value : \", each.projectId);\n        projects.push(each.projectID);\n        console.log(\"projects value : \", projects);\n      }); // console.log(\"projIdsfromEndPoint : \", projects);\n\n      setUsers(users => [...users, //   { id: each.id, status: userStatus, projectID: projIdsfromEndPoint },\n      {\n        id: each.id,\n        status: userStatus,\n        projectID: [...projectID, projectDetailsfromEndPoint.map(each => each.projectId + \" ,\")]\n      }]);\n      console.log(\"user after updata : \", users);\n    });\n  };\n\n  useEffect(() => {\n    //fetching project management data ...\n    getDataFromAPI(commonData.project_membership, \"\").then(() => {\n      console.log(\"proj membership data : \", projectMembership);\n    }); //fetching unregistered data....\n\n    console.log(\"Use Effect called..\");\n    getDataFromAPI(commonData.unregistered_url, commonData.unregistered).then(() => {\n      updataUsersInfo(unregistered, commonData.unregistered);\n    }); //fetching registered data....\n\n    getDataFromAPI(commonData.registered_url, commonData.registered).then(() => {\n      updataUsersInfo(registered, commonData.registered); //        users.push({ id: each.id, status: \"REG\" });\n    });\n  }, [displayData]); //dispatching the users to the store\n\n  dispatch(setAllUsers(users));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Click on the display button to get all the users information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: refreshPage,\n      children: \" Display Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UsersListingComponent, \"lX4bwePRB3Ossj5VAEXheY80q04=\", false, function () {\n  return [useDispatch];\n});\n\n_c = UsersListingComponent;\nexport default UsersListingComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersListingComponent\");","map":{"version":3,"sources":["C:/Users/gopin/ReactJS_Projects/datasite-code-test/src/components/UsersListingComponent.js"],"names":["React","useEffect","useState","useDispatch","setAllUsers","commonData","UsersListingComponent","displayData","setDisplayData","registered","setRegistered","unregistered","setUnRegistered","projectMembership","setProjectMembership","users","setUsers","projectID","dispatch","refreshPage","console","log","getDataFromAPI","url","type","response","fetch","data","json","updataUsersInfo","userStatus","map","each","projects","projectDetailsfromEndPoint","filter","item","userId","id","projectId","push","status","project_membership","then","unregistered_url","registered_url"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAllUsers } from \"../redux/actions/Actions\";\r\n\r\nimport commonData from \"./commonData\";\r\n// import useFetch from \"./common/useFetch\";\r\n\r\nconst UsersListingComponent = () => {\r\n  const [displayData, setDisplayData] = useState(false);\r\n  const [registered, setRegistered] = useState([]);\r\n  const [unregistered, setUnRegistered] = useState([]);\r\n  const [projectMembership, setProjectMembership] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const projectID = [];\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const refreshPage = () => {\r\n    setUsers([]);\r\n    setDisplayData(!displayData);\r\n    console.log(\"display\");\r\n  };\r\n\r\n  const getDataFromAPI = async (url, type) => {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (type == commonData.registered) {\r\n      setRegistered(data);\r\n    } else if (type == commonData.unregistered) {\r\n      setUnRegistered(data);\r\n    } else if (type == \"\") {\r\n      console.log(\"data in PM :\", data);\r\n      setProjectMembership(data);\r\n    }\r\n  };\r\n\r\n  const updataUsersInfo = (data, type) => {\r\n    let userStatus = \"\";\r\n\r\n    data.map((each) => {\r\n      var projects = [];\r\n      if (type == commonData.registered) {\r\n        userStatus = commonData.registered;\r\n      } else {\r\n        userStatus = commonData.unregistered;\r\n      }\r\n\r\n      var projectDetailsfromEndPoint = projectMembership.filter(\r\n        (item) => item.userId == each.id\r\n      );\r\n\r\n      //      console.log(\"projIdsfromEndPoint : \", projectDetailsfromEndPoint);\r\n\r\n      projectDetailsfromEndPoint.map((each) => {\r\n        console.log(\"each value : \", each.projectId);\r\n        projects.push(each.projectID);\r\n        console.log(\"projects value : \", projects);\r\n      });\r\n\r\n      // console.log(\"projIdsfromEndPoint : \", projects);\r\n\r\n      setUsers((users) => [\r\n        ...users,\r\n        //   { id: each.id, status: userStatus, projectID: projIdsfromEndPoint },\r\n        {\r\n          id: each.id,\r\n          status: userStatus,\r\n          projectID: [\r\n            ...projectID,\r\n            projectDetailsfromEndPoint.map((each) => each.projectId + \" ,\"),\r\n          ],\r\n        },\r\n      ]);\r\n\r\n      console.log(\"user after updata : \", users);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    //fetching project management data ...\r\n    getDataFromAPI(commonData.project_membership, \"\").then(() => {\r\n      console.log(\"proj membership data : \", projectMembership);\r\n    });\r\n\r\n    //fetching unregistered data....\r\n    console.log(\"Use Effect called..\");\r\n    getDataFromAPI(commonData.unregistered_url, commonData.unregistered).then(\r\n      () => {\r\n        updataUsersInfo(unregistered, commonData.unregistered);\r\n      }\r\n    );\r\n\r\n    //fetching registered data....\r\n    getDataFromAPI(commonData.registered_url, commonData.registered).then(\r\n      () => {\r\n        updataUsersInfo(registered, commonData.registered);\r\n        //        users.push({ id: each.id, status: \"REG\" });\r\n      }\r\n    );\r\n  }, [displayData]);\r\n\r\n  //dispatching the users to the store\r\n  dispatch(setAllUsers(users));\r\n\r\n  return (\r\n    <div>\r\n      <h2> Click on the display button to get all the users information.</h2>\r\n      <button onClick={refreshPage}> Display Users</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersListingComponent;\r\n"]},"metadata":{},"sourceType":"module"}